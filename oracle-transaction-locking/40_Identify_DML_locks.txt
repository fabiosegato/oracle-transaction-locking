Locks em bancos que utilizam lista de locks em memória

1- Acha o endereço físico do registro que precisa sofre lock
2- Acessa a lista de locks em memória
3- Faz um lock na lista
4- Busca na lista se o endereço já está na lista
5- Caso não esteja insere o endereço na lista
6- Desfaz o lock na lista
7- Faz a alteração no registro
8- Faz commit ou rollback
9- Acessa a lista de locks em memória
10- Faz um lock na lista
11- Busca o endereço na lista
12- Retira o endereço da lista
13- Desfaz o lock na lista

Quanto mais locks você precisa mais tempo você irá gastar para adiquirir esses locks.
O Oracle não trabalha dessa forma.

1- Acha o endereço físico do registro que precisa sofre lock
2- Marca o próprio registro com o lock, ou fica esperando em uma fila caso o registro esteja em lock por outra transação
, não utiliza uma lista de locks.

O lock é registrado como um atributo do registro. Esse atributo contém o ID único da transação que aponta para para um segment de undo.
Logo a nova transação é capaz de através desse número identificar rapidamento se essa transação ainda está ativa ou não, caso esteja ativa ela terá que ficar na fila caso queira alterar o registro,
ou em caso de leitura, terá a informação de onde consultar a versão antiga na TBS undo.

UPDATE MULT_VERSION_TESTE SET name = upper(name)

SELECT 
s.USERNAME 
,L.SID 
,TRUNC(ID1/POWER(2,16)) RBS 
,BITAND(ID1,TO_NUMBER('ffff','xxxx'))+0 AS slot
,id2 AS seq
,lmode
,request 
,block
FROM 
v$lock l
INNER JOIN v$session s  ON s.sid = l.sid
WHERE l.type = 'TX'

UPDATE MULT_VERSION_TESTE SET name = lower(name)

SELECT 
sa.username AS user_blocker
,sa.sid AS sid_blocker
,sb.username AS user_blocked
,sb.sid AS sid_blocked
FROM 
v$lock a 
INNER JOIN v$lock b ON b.id1 = b.id1
INNER JOIN v$session sa ON sa.sid = a.sid 
INNER JOIN v$session sb ON sb.sid = b.sid 
WHERE 
a.block=1 AND b.request > 0

SELECT * FROM dba_waiters
